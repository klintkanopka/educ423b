---
title: "Problem Set 0"
author: "[[Anvit Garg]]"
format: html
editor: visual
---

> Hey Anvit! I can tell `R` is not your first language because of some of the conventions you use, but you did a great job. Specifically take a look at the "strongest animal" table - I refactored some of your code using pipe operators. It's definitely a little odd compared to languages like Python, but once you get the hang of it I think it's quite nice for data work.
>
> The things to remember about pipes are that `%>%` and `|>` do the same job, but `|>` is technically faster and that the two code chunks:
>
> `x %>% function(y)`
>
> and
>
> `function(x,y)`
>
> are identical - the thing pipes let you do is skip storing intermediate values and then just throwing them back in as the first argument on your next line.
>
> Grade: 5/5

## Instructions

Answer the questions directly in this document. Please include all code and output in this document. To submit, prepend your last name to the file name (like `kanopka-ps0.qmd`) and upload the `.qmd` document to Canvas. You may consult other students, but please identify anyone you worked with, prepare your responses individually, and submit your own document. Failure to do so is an honor code violation.

**I worked with:**

## Part 1: Short Answers

1.  **Describe the difference between** `pivot_longer()` **and** `pivot_wider()` **and a situation where you might use each. What happens to the number of observations and variables when transforming a dataframe using each function?**

`pivot_longer()` makes datasets **longer** by increasing the number of rows and decreasing the number of columns. You could use this function in a situation where you have to change the data format to long in order to get a count of the number of observations recorded of a particular variable (e.g. number of observations recorded in 2018). Number of observations increases and number of variables decreases.

`pivot_wider()` is the opposite of `pivot_longer()`: it makes a data set **wider** by increasing the number of columns and decreasing the number of rows. It's relatively rare to need `pivot_wider()` to make tidy data, but it's often useful for creating summary tables for presentation, or data in a format needed by other tools. Number of observations decreases and number of variables increases.

2.  **Describe why this is one of the worst infographics you have ever seen. How could you begin to fix it?**

![](http://livingqlikview.com/wp-content/uploads/2017/04/Worst-Data-Visualizations-06.jpg)

1.  The creator of this graph has shown a decrease in percentages of the White population, but has not visualized a decrease in the area - this makes it confusing for the reader to see the proportion change over time. This could be improved by making a dynamic visualization that shows proportions year by year instead of trying to depict the changes from 1960-2060 in one snapshot.
2.  Percentage value is missing for Black and Asian populations in 1960. These should be added to at least make it the percentage changes clearer.

> This is a good start, but it's even worse than that! The height of the US isn't constant, so it just cuts chunks of the plot off. It implies geographic locations. So much sad.

## Part 2: Cleaning Data

The following code chunk loads the `tidyverse` packages and fetches a dataset into an object called `d`. This data, from a [YouGov poll](https://today.yougov.com/topics/society/articles-reports/2021/05/13/lions-and-tigers-and-bears-what-animal-would-win-f), asks 1224 Americans, "Which of the following animals, if any, do you think you could beat in a fight if you were unarmed?"

```{r}
#| include: false

library(tidyverse)

d <- readRDS(url('https://github.com/klintkanopka/educ423b/blob/main/ps0/animal_fights.rds?raw=true'))
```

Using this data, complete the following data cleaning tasks:

1.  Recode `gender` and `region` as strings that correspond with their labels.

2.  Create new, dichotomized, versions of the `animalfight1_XX` variables. Code them so that the variable takes a value of `1` if the respondent believes they can beat the animal in a fight and `0` otherwise. Name these new variables in the format: `d_animalname`

    > This all works great, but check the official solutions for the "tidy" way of doing these tasks using `mutate()` and `case_when()` - they're generally a lot more straightforward without so much copy/paste code. You might like the approach better!

```{r}
#| echo: false

# Write code for data cleaning here
d$gender <- as.character(d$gender)

```

```{r}
d$gender[d$gender == "1"] <- "Male"  
d$gender[d$gender == "2"] <- "Female" 
```

```{r}
d$region <- as.character(d$region)
d$region[d$region == "1"] <- "Northeast"  
d$region[d$region == "2"] <- "Midwest" 
d$region[d$region == "3"] <- "South"  
d$region[d$region == "4"] <- "West" 
```

```{r}
colnames(d)[28]  <- "d_rat" 
d$d_rat[d$d_rat == 2] <- 0
d$d_rat[d$d_rat == 3] <- 0

colnames(d)[29] <- "d_housecat"
d$d_housecat[d$d_housecat == 2] <- 0
d$d_housecat[d$d_housecat == 3] <- 0

colnames(d)[30] <- "d_mediumdog"
d$d_mediumdog[d$d_mediumdog == 2] <- 0
d$d_mediumdog[d$d_mediumdog == 3] <- 0

```

```{r}


d$animalfight1_4[d$animalfight1_4 == 2] <- 0
d$animalfight1_4[d$animalfight1_4 == 3] <- 0
colnames(d)[31] <- "d_largedog"

d$animalfight1_5[d$animalfight1_5 == 2] <- 0
d$animalfight1_5[d$animalfight1_5 == 3] <- 0
colnames(d)[32] <- "d_kangaroo"


d$animalfight1_6[d$animalfight1_6 == 2] <- 0
d$animalfight1_6[d$animalfight1_6 == 3] <- 0
colnames(d)[33] <- "d_eagle"


d$animalfight1_7[d$animalfight1_7 == 2] <- 0
d$animalfight1_7[d$animalfight1_7 == 3] <- 0
colnames(d)[34] <- "d_grizzlybear"


d$animalfight1_8[d$animalfight1_8 == 2] <- 0
d$animalfight1_8[d$animalfight1_8 == 3] <- 0
colnames(d)[35] <- "d_wolf"


d$animalfight1_9[d$animalfight1_9 == 2] <- 0
d$animalfight1_9[d$animalfight1_9 == 3] <- 0
colnames(d)[36] <- "d_lion"


d$animalfight1_10[d$animalfight1_10 == 2] <- 0
d$animalfight1_10[d$animalfight1_10 == 3] <- 0
colnames(d)[37] <- "d_gorilla"


d$animalfight1_11[d$animalfight1_11 == 2] <- 0
d$animalfight1_11[d$animalfight1_11 == 3] <- 0
colnames(d)[38] <- "d_chimpanzee"


d$animalfight1_12[d$animalfight1_12 == 2] <- 0
d$animalfight1_12[d$animalfight1_12 == 3] <- 0
colnames(d)[39] <- "d_cobra"


d$animalfight1_13[d$animalfight1_13 == 2] <- 0
d$animalfight1_13[d$animalfight1_13 == 3] <- 0
colnames(d)[40] <- "d_elephant"


d$animalfight1_14[d$animalfight1_14 == 2] <- 0
d$animalfight1_14[d$animalfight1_14 == 3] <- 0
colnames(d)[41] <- "d_croc"


d$animalfight1_15[d$animalfight1_15 == 2] <- 0
d$animalfight1_15[d$animalfight1_15 == 3] <- 0
colnames(d)[42] <- "d_goose"

```

3.  Using the recoded data and your dichotomized variables, output a table that ranks the animals from strongest to weakest by the proportion of respondents who believe they could win a fight against them. *Hint: Start with a* `pivot_longer()`

```{r}
#| echo: false
library(tidyr)

dfinal <- d %>% pivot_longer(cols=c('d_rat', 'd_housecat', 'd_mediumdog', 'd_largedog', 'd_kangaroo', 'd_eagle', 'd_grizzlybear', 'd_wolf', 'd_lion', 'd_gorilla', 'd_chimpanzee', 'd_cobra', 'd_elephant', 'd_croc', 'd_goose'),
                    names_to='Animal',
                    values_to='Score')
```

```{r}
newd <- dfinal %>% count(Animal, Score)
newd <- filter_if(newd, is.numeric, all_vars((.) != 0))
newd <- newd %>% arrange(desc(n))
newd <- newd %>% mutate(Percentage = (n/1224)*100)
newd
```

```{r}
# so the table above is fine and works, but there is kind of a "cleaner" way using pipe operators (either %>% or |>, though I prefer |>):

# note that i used EXACTLY all of your code, but we don't need to store intermediate values - the pipe operators take the ouput of a previous line and automatically add it as the first argument on the next line

d %>% 
  pivot_longer(cols=c('d_rat', 'd_housecat', 'd_mediumdog', 'd_largedog',
                      'd_kangaroo', 'd_eagle', 'd_grizzlybear', 'd_wolf', 
                      'd_lion', 'd_gorilla', 'd_chimpanzee', 'd_cobra',
                      'd_elephant', 'd_croc', 'd_goose'),
                    names_to='Animal',
                    values_to='Score') %>%
  count(Animal, Score) %>%
  filter_if(is.numeric, all_vars((.) != 0)) %>%
  arrange(desc(n)) %>%
  mutate(Percentage = (n/1224)*100)
```

## Part 3: Visualizing Data

Using the data you prepared above, answer each of the questions below by creating a visualization using `ggplot`. Include titles and labels as needed so that the figure speaks for itself.

1.  **What geographic region has the most confidence in their ability to win fights with animals?**

```{r}
#| echo: false

# Write code for Figure 1 here
geog <- dfinal %>% count(region, Score)
geog <- geog %>% mutate(Percentage_of_Total = (n/18360)*100)
geog <- filter_if(geog, is.numeric, all_vars((.) != 0))


```

```{r}
library(ggplot2)
# ggplot2 is automatically loaded when you call library(tidyverse)
# Basic barplot
ggplot(data=geog, aes(x=region, y= Percentage_of_Total)) +
  geom_bar(stat="identity") + labs(title = "Which Region is the Most Confident in Fighting Animals?", x = "Region", y = "Percentage of YES Responses to Different Animals")
```

2.  **Is there a relationship between confidence in winning fights and respondent age?**

```{r}
#| echo: false

# Write code for Figure 2 here
age1 <- dfinal %>% count(age, Score)
age1 <- filter_if(age1, is.numeric, all_vars((.) != 0))
age1 <- age1 %>% mutate(Percentage_of_Total = (n/18360)*100)
ggplot(data=age1, aes(x=age, y= Percentage_of_Total)) +
  geom_bar(stat="identity") + labs(title = "What Age Group is the Most Confident in Fighting Animals?", x = "Ages", y = "Percentage of YES Responses to Different Animals")
```

3.  **Is there a relationship between confidence in winning fights and educational attainment? Does it vary by gender?**

```{r}
#| echo: false

# Write code for Figure 3 here
educ1 <- dfinal %>% count(educ, Score, gender)
educ1 <- filter_if(educ1, is.numeric, all_vars((.) != 0))
educ1 <- educ1 %>% mutate(Percentage_of_Total = (n/18360)*100)
ggplot(data=educ1, aes(x=educ, y= Percentage_of_Total, fill=gender)) +
  geom_bar(stat="identity") + labs(title = "Which Education Level is the Most Confident in Fighting Animals?", x = "Level of Education", y = "Percentage of YES Responses to Different Animals")
```
